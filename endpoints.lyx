#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Richard"
\font_sans "default" "ModernGothicNo2"
\font_typewriter "default" "Typewriter"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 90 90
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3.4cm
\topmargin 3cm
\rightmargin 4.4cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Endpoints
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Usage"

\end_inset

Usage
\end_layout

\begin_layout Standard
Request are sent to 
\family typewriter
/<application>/<endpoint>
\family default
.
 The following types of requests may be sent:
\end_layout

\begin_layout Description
GET
\begin_inset space ~
\end_inset

Request with parameters URL-encoded
\end_layout

\begin_layout Description
POST
\begin_inset space ~
\end_inset

Request:
\begin_inset space ~
\end_inset


\family typewriter
application/x-www-form-urlencoded
\family default
 containing parameters.
 This is the default when an HTML 
\family typewriter
<form>
\family default
 is used.
\end_layout

\begin_layout Description
POST
\begin_inset space ~
\end_inset

Request:
\begin_inset space ~
\end_inset


\family typewriter
multipart/form-data
\family default
 Contains parameters and any number of files uploads.
\end_layout

\begin_layout Description
POST
\begin_inset space ~
\end_inset

Request
\begin_inset space ~
\end_inset

with
\begin_inset space ~
\end_inset

XML
\begin_inset space ~
\end_inset

Body If the Content Type contains the string 
\family typewriter
xml
\family default
 (for example the Content Type 
\family typewriter
application/xml
\family default
), arbitrary XML is supplied, which is passed to the parameter transformation
 structure, inside an 
\family typewriter
<xml>
\family default
 tag inside 
\family typewriter
<input-from-request>
\family default
, instead of the normal 
\family typewriter
<parameter>
\family default
 elements.
\end_layout

\begin_layout Description
POST
\begin_inset space ~
\end_inset

Requset
\begin_inset space ~
\end_inset

with
\begin_inset space ~
\end_inset

JSON
\begin_inset space ~
\end_inset

Body If the Content Type contains the string 
\family typewriter
json
\family default
 (for example the Content Type 
\family typewriter
application/json
\family default
), JSON is expected in the incoming request body.
 This is converted to XML and, as with XML requests, placed inside 
\family typewriter
<json>
\family default
 inside 
\family typewriter
<input-from-request>
\family default
 element instead of the normal 
\family typewriter
<parameter>
\family default
 elements, with any characters which would be illegal in XML (for example
 element name starting with a digit) replaced by 
\family typewriter
_xxxx_
\family default
 containing their hex unicode character code.
\end_layout

\begin_layout Standard
There are the following special parameters.
 They are supplied along with the normal parameters, apart from in the case
 of a POST request application/xml in which case these special parameters
 are passed as GET parameters
\end_layout

\begin_layout Description

\family typewriter
hash
\family default
 Mandatory.
 See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Hash"

\end_inset

 for more information.
\end_layout

\begin_layout Description

\family typewriter
environment
\family default
 Optional.
 Can take the values of 
\family typewriter
live
\family default
 (default) or 
\family typewriter
preview
\family default
.
\end_layout

\begin_layout Description

\family typewriter
debug
\family default
 This requests debug.
 Applications can have debug enabled or not.
 Only if applications have debug enabled 
\emph on
and
\emph default
 the 
\family typewriter
debug
\family default
 parameter is passed to the request, does debugging occur.
\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Standard
The following terms are used in the context of debugging:
\end_layout

\begin_layout Description
Debugging
\begin_inset space ~
\end_inset

Allowed Each application may be configured in the database to allow debugging
 or not.
 This may be changed with a button in the Service Portal.
\end_layout

\begin_layout Description
Debugging
\begin_inset space ~
\end_inset

Requested It is possible to send the extra parameter 
\family typewriter
debug=true
\family default
 with a request.
 
\end_layout

\begin_layout Standard
Debugging occurs if 
\emph on
both
\emph default
 debugging is allowed 
\emph on
and
\emph default
 requested.
\end_layout

\begin_layout Standard
Debugging means: the input and output of the parameter transformation is
 stored in the request log.
 These XML files may then be downloaded in the Service Portal.
\end_layout

\begin_layout Standard
Whether debugging is allowed or not, and whether it has been requested or
 not, are available in the input to the parameter transformation.
 This may, if the parameter transformation desires it, be written into 
\begin_inset Quotes eld
\end_inset

parameters
\begin_inset Quotes erd
\end_inset

 available to the main endpoints processing flow.
\end_layout

\begin_layout Subsection
Service Portal
\end_layout

\begin_layout Standard
The Service Portal is available under the 
\family typewriter
/service-portal
\family default
 URL.
 By default a user with username 
\family typewriter
admin
\family default
 and password 
\family typewriter
admin
\family default
 is created; this password must be changed on first login.
 
\end_layout

\begin_layout Standard
The purpose of the Service Portal is to be able to publish the application,
 look at the request log, and perform various other actions.
\end_layout

\begin_layout Standard
An 
\begin_inset Quotes eld
\end_inset

admin
\begin_inset Quotes erd
\end_inset

 section of the Service Portal allows additional applications to be created,
 previous ones to be deleted, etc.
\end_layout

\begin_layout Standard
If the deployment is 
\begin_inset Quotes eld
\end_inset

single application
\begin_inset Quotes erd
\end_inset

 mode then it is not possible to log in to the Service Portal, as it is
 not possible to create additional applications or publish existing applications
 in this mode.
\end_layout

\begin_layout Section
Format of an Application
\end_layout

\begin_layout Standard
The term "application" is used to describe a piece of configuration.
 The system can serve multiple applications simultaneously.
\end_layout

\begin_layout Standard
An application is configured with a directory full of files.
 The rest of this section describes what files may be present, and what
 their syntax is.
\end_layout

\begin_layout Standard
Any additional files which are present in the directory, but not described
 here, are silently ignored.
\end_layout

\begin_layout Subsection
Example Application
\end_layout

\begin_layout Standard
Take a look at the 
\family typewriter
example-application
\family default
 directory in the code.
 All features described below are present in an example form in that application.
 It might be helpful to have the example customer open when reading the
 explanations below.
\end_layout

\begin_layout Subsection

\family typewriter
<endpoint>
\family default
 and 
\family typewriter
<endpoint-folder>
\end_layout

\begin_layout Standard
An application contains comprises of multiple endpoints.
 These are described in the 
\family typewriter
endpoints.xml
\family default
 file.
 Each endpoint has a name which is used in the URL.Which endpoints is requested
 is specified when the user calls the application, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Usage"

\end_inset

.
 
\end_layout

\begin_layout Standard
Although the endpoints must all have a unique name (for the URL), they are
 arranged in a hierarchy so that certain aspects may be defined once and
 inherited to all children.
 The structure is thus a mandatory root 
\family typewriter
<endpoint-folder>
\family default
 which may contain any number of children 
\family typewriter
<endpoint-folder>
\family default
 and 
\family typewriter
<endpoint>
\family default
 elements.
\end_layout

\begin_layout Subsection
Parameters
\end_layout

\begin_layout Standard
One of the first things to happen during the processing of an endpoints
 request is to determine the values of parameters.
 Parameters are read-only strings, for example the parameter 
\family typewriter
foo
\family default
 may have the value 
\family typewriter
bar
\family default
.
\end_layout

\begin_layout Standard
The parameters are sent in the HTTP request to Endpoints.
 See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Usage"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for which types of requests can be send to Endpoints, and how the parameters
 are determined for each of those types of requests.
 For example in the case of a GET request, the parameters are simply the
 
\family typewriter
a=b&c=d
\family default
 parameters sent along with the request.
\end_layout

\begin_layout Standard
So that it isn't possible to create an Endpoints configuration which has
 a misspelt parameter name, the set of available parameters must be specified.
 This is analogous to requiring variables to be declared in programming
 languages such as Java.
\end_layout

\begin_layout Standard
Parameters are defined, in the simplest case, directly under the root 
\family typewriter
<endpoint-folder>
\family default
 node of 
\family typewriter
endpoints.xml
\family default
.
 This means they are available for all endpoints defined in the file.
\end_layout

\begin_layout Standard
The simplest form of parameter is 
\family typewriter
<parameter name="foo">
\family default
.
 This means the user must supply a value that parameter as a GET or POST
 parameter like 
\family typewriter
foo=value
\family default
 in the request; not doing so is an error.
\end_layout

\begin_layout Standard
To use a default value, if the user hasn't supplied anything, and thereby
 make the parameter optional, use 
\family typewriter
<parameter name="foo" default-value="a-value"/>
\family default
.
\end_layout

\begin_layout Standard
The syntax for this is 
\family typewriter
${param}
\family default
.
 The braces are, in contrast to many other systems, mandatory.
\end_layout

\begin_layout Standard
Parameter names are case-sensitive.
 Parameter names may consist of letters, digits, hyphen, underscore and
 dot.
 In contrast to variables in programming languages, there is no rule against
 creating a parameter whose name beings with (or consists entirely of) digits.
\end_layout

\begin_layout Standard
The HTTP standard allows multiple GET parameters to be supplied with the
 same name, like 
\family typewriter
?param=foo&param=bar
\family default
.
 In this case, all those GET values are concatenated into the parameter.
 The default separator is two pipe characters 
\family typewriter
||
\family default
.
 This can be overridden with the 
\family typewriter
multiple-value-separator=','
\family default
 attribute on an 
\family typewriter
<endpoint>
\family default
 or 
\family typewriter
<endpoint-folder>
\family default
 (e.g.
\begin_inset space \space{}
\end_inset

the root element of the file).
\end_layout

\begin_layout Subsubsection
System Parameters
\end_layout

\begin_layout Standard
There are certain parameters which are always available, and are not provided
 by the client.
 These can also be used with the same 
\family typewriter
${param}
\family default
 syntax.
\end_layout

\begin_layout Description

\family typewriter
${request-id}
\family default
 Each request gets its own unique UUID.
\end_layout

\begin_layout Subsubsection
Parameter Transformation
\end_layout

\begin_layout Standard
The parameters can be optionally transformed by XSLT.
 An 
\family typewriter
<endpoint>
\family default
 in 
\family typewriter
endpoints.xml
\family default
 may have an optional configuration element like:
\end_layout

\begin_layout LyX-Code
<parameter-transformation xslt="special.xslt">
\end_layout

\begin_layout LyX-Code
  <!-- Any data source commands -->
\end_layout

\begin_layout LyX-Code
  <xml-from-application file="stunden-und-preise.xml"/>
\end_layout

\begin_layout LyX-Code
</parameter-transformation>
\end_layout

\begin_layout Standard
If this element is present, then an additional processing step is performed.
\end_layout

\begin_layout Enumerate
If the request is a GET/POST with parameters then all parameters are taken
 and 
\family typewriter
<parameter name="x" value="y"/>
\family default
 elements are created.
 (no matter if declared 
\family typewriter
<endpoints.xml>
\family default
 or not).
 
\end_layout

\begin_deeper
\begin_layout Standard
If the request is a POST with an XML body then the XML is taken as is.
\end_layout

\end_deeper
\begin_layout Enumerate
Any specified data sources are executed.
 Any GET and POST parameters may be accessed with the 
\family typewriter
${x}
\family default
 syntax (see the data source descriptions for where parameters may be used).
 Any parameter which is referenced but not supplied with the request is
 left empty (an error is 
\emph on
not
\emph default
 produced) as the point of the parameter transformation is to determine
 errors.
 An error being produced by a missing parameter would then not allow the
 parameter transformation to produce an 
\family typewriter
<error>
\family default
 output.
\end_layout

\begin_layout Enumerate
They are placed into an XML into the 
\family typewriter
<input-from-request>
\family default
 element.
 The format of the element is shown in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Parameter-Transformation-Input"

\end_inset

.
 
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout LyX-Code
<parameter-transformation-input>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  <input-from-request>
\end_layout

\begin_layout LyX-Code
    <endpoint>my-endpoint</endpoint>
\end_layout

\begin_layout LyX-Code
    <debug-requested/>   <!-- or missing -->
\end_layout

\begin_layout LyX-Code
    <parameter name="language" value="foo"/>
\end_layout

\begin_layout LyX-Code
    <parameter name="system" value="unknown"/>
\end_layout

\begin_layout LyX-Code
    <parameter name="url" value=""/>
\end_layout

\begin_layout LyX-Code
    <parameter name="filter" value=""/>
\end_layout

\begin_layout LyX-Code
    <parameter name="name" value="Martin Schmidt"/>
\end_layout

\begin_layout LyX-Code
    <http-header name-lowercase="user-agent">Foo</http-header>
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
    <cookie name="Session">12345</cookie>
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
    <ip-address>1.2.3.4</ip-address> <!-- or missing -->
\end_layout

\begin_layout LyX-Code
  </input-from-request>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  <input-from-application>
\end_layout

\begin_layout LyX-Code
    <application>application-name</application>
\end_layout

\begin_layout LyX-Code
    <application-display-name>The Application</application-display-name>
 <!-- or missing -->
\end_layout

\begin_layout LyX-Code
    <git-revision>892381b8126f808252cf00ad959b38eb8df6f818</git-revision>
 <!-- or missing -->
\end_layout

\begin_layout LyX-Code
    <debug-allowed/>   <!-- or missing -->
\end_layout

\begin_layout LyX-Code
    <secret-key>foo</secret-key>
\end_layout

\begin_layout LyX-Code
    <incremental-id-per-endpoint>1345</incremental-id-per-endpoint>
\end_layout

\begin_layout LyX-Code
    <random-id-per-application>8764598230</random-id-per-application>
\end_layout

\begin_layout LyX-Code
    <base-url>https://endpoints.com/</base-url>
\end_layout

\begin_layout LyX-Code
  </input-from-application>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  <!-- results of any data sources commands -->
\end_layout

\begin_layout LyX-Code
  <whatever-the-data-source-command-returns/>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
</parameter-transformation-input>
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parameter-Transformation-Input"

\end_inset

Parameter Transformation Input
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Standard
The Git Revision is only included if the application has been published
 via the Service Portal.
 If the application is deployed via the 
\begin_inset Quotes eld
\end_inset

fixed application
\begin_inset Quotes erd
\end_inset

 method then the Git Revision tag is omitted.
\end_layout

\end_deeper
\begin_layout Enumerate
This document is transformed via the XSLT.
\end_layout

\begin_deeper
\begin_layout Standard
It produces a structure as shown in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Parameter-Transformation-Output"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout LyX-Code
<parameter-transformation-output>
\end_layout

\begin_layout LyX-Code
  <error>Something wrong wrong</error> <!-- optional -->
\end_layout

\begin_layout LyX-Code
  <parameter name="language" value="foo"/>
\end_layout

\begin_layout LyX-Code
  <parameter name="system" value="unknown"/>
\end_layout

\begin_layout LyX-Code
  <parameter name="url" value=""/>
\end_layout

\begin_layout LyX-Code
  <parameter name="filter" value=""/>
\end_layout

\begin_layout LyX-Code
  <parameter name="name" value="Martin Schmidt"/>
\end_layout

\begin_layout LyX-Code
</parameter-transformation-output>
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parameter-Transformation-Output"

\end_inset

Parameter Transformation Output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The XSLT is taken from the directory 
\family typewriter
parameter-xslt
\family default
.
 (The name 
\begin_inset Quotes eld
\end_inset

transformer
\begin_inset Quotes erd
\end_inset

 is not used in this directory name, in order to differentiate it from the
 directory 
\family typewriter
transformer
\family default
, which has a different meaning.)
\end_layout

\end_deeper
\begin_layout Enumerate
If the result of the transformation includes 
\family typewriter
<error>Param 'x' must be an integer</error>
\family default
, this error message is returned to the user, and no further processing
 is performed.
 The absence of an error tag is considered a success (i.e.
\begin_inset space \space{}
\end_inset

there is no 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 tag or similar).
\end_layout

\begin_layout Enumerate
Parameters are extracted from the result of the transformation.
 If the same parameter appears multiple times, then later values override
 earlier values.
\end_layout

\begin_layout Enumerate
Normal parameter processing steps are taken (default values are applied,
 an error if values are missing, etc.).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Hash"

\end_inset

Hash
\end_layout

\begin_layout Standard
We wish to restrict which users may use the software.
 There is a mandatory GET or POST parameter, which the user must supply,
 called 
\family typewriter
hash
\family default
.
 There is a file 
\family typewriter
security.xml
\family default
 in the root of the application which has the following structure.
\end_layout

\begin_layout LyX-Code
<security>
\end_layout

\begin_layout LyX-Code
  <secret-key>key1</secret-key>
\end_layout

\begin_layout LyX-Code
  <secret-key>key2</secret-key>
\end_layout

\begin_layout LyX-Code
</security>
\end_layout

\begin_layout Standard
An 
\family typewriter
<endpoint>
\family default
 may optionally have the following block:
\end_layout

\begin_layout LyX-Code
<include-in-hash>
\end_layout

\begin_layout LyX-Code
  <parameter name="foo"/>
\end_layout

\begin_layout LyX-Code
  <parameter name="bar"/>
\end_layout

\begin_layout LyX-Code
</include-in-hash>
\end_layout

\begin_layout Standard
The server calculates the expected value of the user-supplied 
\family typewriter
hash
\family default
 parameter as an SHA-256 hex hash.
 The source of the hash is the string concatenation of all the following
 things:
\end_layout

\begin_layout Enumerate
Name of the endpoint
\end_layout

\begin_layout Enumerate
The values of all the parameters listed in the 
\family typewriter
<include-in-hash>
\family default
 block, in the order in which they are listed there.
 (If there is no 
\family typewriter
<include-in-hash>
\family default
 section, or there is but it's empty, then no parameters are added to the
 hash's source string for this step.)
\end_layout

\begin_layout Enumerate
Environment name (either 
\family typewriter
live
\family default
 or 
\family typewriter
preview
\family default
)
\end_layout

\begin_layout Enumerate
Any key from the 
\family typewriter
security.xml
\family default
 file
\end_layout

\begin_layout Standard
The idea behind there being multiple keys is the following: There might
 be multiple users, and they might have access to the same endpoint with
 the same parameters.
 By giving them different hashes based on different keys, if one users leaves,
 it's possible to invalidate only their hashes (by removing their key),
 without affecting other users.
\end_layout

\begin_layout Standard
Example: If the application has an endpoint 
\family typewriter
endpoint
\family default
, the 
\family typewriter
security.xml
\family default
 is as above, and the user sends a GET request with the parameters 
\family typewriter
?foo=foovalue
\family default

\begin_inset space \hspace{}
\length 0bp
\end_inset


\family typewriter
&bar=barvalue
\family default
, then an acceptable value of the 
\family typewriter
hash
\family default
 parameter is 
\family typewriter
sha256hex(
\begin_inset space \hspace{}
\length 0bp
\end_inset

"endpoint
\begin_inset space \hspace{}
\length 0bp
\end_inset

foovalue
\begin_inset space \hspace{}
\length 0bp
\end_inset

barvalue
\begin_inset space \hspace{}
\length 0bp
\end_inset

live
\begin_inset space \hspace{}
\length 0bp
\end_inset

key1")
\family default
.
\end_layout

\begin_layout Subsection
Executing Tasks
\end_layout

\begin_layout Standard
An 
\family typewriter
<endpoint>
\family default
 contains zero or more 
\family typewriter
<task>
\family default
s.
 The task does an action such as sending an email or writing to a database.
 It is like a "side-effect" of accessing the endpoint.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "if-equals"

\end_inset

Executing Tasks Optionally
\end_layout

\begin_layout Standard
A 
\family typewriter
<task>
\family default
 may have the optional attributes such as 
\family typewriter
<task ...
 if="${foo}" equals="bar">
\family default
.
 The task only gets executed only if the condition is satisfied.
 See 
\family typewriter
conditional-tasks.md
\family default
 for more information.
\end_layout

\begin_layout Subsubsection
Parallel Execution of Tasks
\end_layout

\begin_layout Standard
Because tasks are often contacting external resources, for example fetching
 a URL, and there is often no dependency between the tasks, there is no
 reason why they need to be performed sequentially.
 By default, therefore, all tasks, as well as the processing of the 
\family typewriter
<success>
\family default
 response, are performed in parallel.
\end_layout

\begin_layout Standard
The exception to this rule is if one task requires an intermediate value
 from a previous task (in which the task must wait for the previous task
 to finish executing before it can begin; see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Intermediate-Values"

\end_inset

), and in the case that a task has an explicit 
\family typewriter
<after>
\family default
 dependency (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:after"

\end_inset

).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:after"

\end_inset

Sequential Execution of Tasks with 
\family typewriter
<after>
\end_layout

\begin_layout Standard
It may be necessary to perform a number of sequential actions, for example
 to create a user in an external service, and then to provision that user
 with data in the external service.
 The external service returns an error if attributes are provisioned before
 the user has been created.
 That makes it necessary to set an explicit dependency between tasks, that
 one task may only begin after another has successfully completed executing.
\end_layout

\begin_layout Standard
Any task may be marked with an optional 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

, and any task or 
\family typewriter
<success>
\family default
 block may have any number of 
\family typewriter
<after>
\family default
 elements referencing previous 
\begin_inset Quotes eld
\end_inset

ids
\begin_inset Quotes erd
\end_inset

.
 For example:
\end_layout

\begin_layout LyX-Code
<task id="first" ....>
\end_layout

\begin_layout LyX-Code
   ...
\end_layout

\begin_layout LyX-Code
</task>
\end_layout

\begin_layout LyX-Code
<task>
\end_layout

\begin_layout LyX-Code
   <after task-id="first"/>
\end_layout

\begin_layout LyX-Code
   <after task-id="..."/>
\end_layout

\begin_layout LyX-Code
   ...
\end_layout

\begin_layout LyX-Code
</task>
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Intermediate-Values"

\end_inset

Intermediate Values: Passing Results From One Task To Another
\end_layout

\begin_layout Standard
In addition to parameters there are 
\series bold
Intermediate Values
\series default
.
 These are like parameters, but they do not come from the user’s request,
 instead they come from other tasks.
\end_layout

\begin_layout Standard
Intermediate values can also be referenced as 
\family typewriter
${value}
\family default
 just like normal parameters.
\end_layout

\begin_layout Standard
Intermediate values may not have the same name as a parameter.
 (If intermediate values could have the same names, then 
\family typewriter
${value}
\family default
 could be ambiguous.)
\end_layout

\begin_layout Standard
Tasks must explicitly specify which intermediate values they output and
 which they input.
 Any task may accept any input intermediate value.
\end_layout

\begin_layout Standard
Different tasks have different capability to output intermediate values.
 For example, HTTP Tasks parse the response, but there is no useful way
 for an email task to output an intermediate value.
 Which tasks output which intermediate values can be seen in the documenation
 of the task.
\end_layout

\begin_layout Standard
A task which outputs intermediate values may not be 
\begin_inset Quotes eld
\end_inset

optional
\begin_inset Quotes erd
\end_inset

 (with 
\family typewriter
if
\family default
 and 
\family typewriter
equals
\family default
 attributes).
 That is because the output intermediate values will be used by other tasks,
 therefore the task must always run.
\end_layout

\begin_layout Standard
For example:
\end_layout

\begin_layout LyX-Code
<task class="endpoints.task.HttpRequestTask">
\end_layout

\begin_layout LyX-Code
   ...
\end_layout

\begin_layout LyX-Code
   <output-intermediate-value name="invoice-number".../>
\end_layout

\begin_layout LyX-Code
</task>
\end_layout

\begin_layout LyX-Code
<task class="endpoints.task.HttpRequestTask">
\end_layout

\begin_layout LyX-Code
   <input-intermediate-value name="invoice-number"/>
\end_layout

\begin_layout LyX-Code
   ...
\end_layout

\begin_layout LyX-Code
</task>
\end_layout

\begin_layout Subsubsection
Sending an Email
\end_layout

\begin_layout Standard
The task 
\family typewriter
<task class="endpoints.task.EmailTask">
\family default
 sends an email.
 It has the following sub-elements configuring it:
\end_layout

\begin_layout Itemize

\family typewriter
<from>
\family default
 is mandatory (parameters like 
\family typewriter
${foo}
\family default
 are expanded)
\end_layout

\begin_layout Itemize

\family typewriter
<to>
\family default
 is mandatory (parameters like 
\family typewriter
${foo}
\family default
 are expanded).
 There may be multiple 
\family typewriter
<to>
\family default
 elements.
 Each 
\family typewriter
<to>
\family default
 sends a separate email, to just this recipient.
 Per 
\family typewriter
<to>
\family default
, only one recipient address is allowed
\end_layout

\begin_layout Itemize

\family typewriter
<subject>
\family default
 is mandatory (parameters like 
\family typewriter
${foo}
\family default
are expanded)
\end_layout

\begin_layout Itemize

\family typewriter
<body-transformation name="a-transformation"/>
\family default
 is mandatory, and can appear multiple times.
 This references a transformation (see below).
 All the different results are placed into a "multipart/alternative" email
 part.
 It would be normal for one referenced transformation to produce HTML and
 the other plain text.
\end_layout

\begin_layout Itemize

\family typewriter
<attachment-static filename="path/foo.pdf">
\family default
 takes the 
\family typewriter
foo.pdf
\family default
 file out of the 
\family typewriter
static
\family default
 directory and includes it as an attachment in the email.
 Parameters like 
\family typewriter
${foo}
\family default
 are not allowed in the 
\family typewriter
filename
\family default
 attribute.
\end_layout

\begin_layout Itemize

\family typewriter
<attachment-transformation name="a-transformation" filename="invoice-${invoice-n
umber}.pdf"/>
\family default
.
 For each of the elements, the transformation is executed, and the resulting
 bytes are attached as a file to the sent email.
 The name of the file is specified in the 
\family typewriter
filename
\family default
 attribute, parameters like 
\family typewriter
${foo}
\family default
 are expanded.
\end_layout

\begin_layout Itemize

\family typewriter
<attachment-ooxml-parameter-expansion source="foo.docx" filename="bar.docx"/>
\family default
 will read in the file 
\begin_inset Quotes eld
\end_inset

foo.docx
\begin_inset Quotes erd
\end_inset

 from the 
\begin_inset Quotes eld
\end_inset

ooxml-responses
\begin_inset Quotes erd
\end_inset

 directory under the Endpoint's configuration and replace any 
\family typewriter
${foo}
\family default
 variables in the document's body, and deliver it.
 Only DOCX is supported; DOC is not supported.
 The name of the file is specified in the 
\family typewriter
filename
\family default
 attribute, parameters like 
\family typewriter
${foo}
\family default
 are expanded.
\end_layout

\begin_layout Itemize

\family typewriter
<attachments-from-request-file-uploads/>
\family default
.
 This includes as attachments all file uploads that have been uploaded to
 this request.
\end_layout

\begin_layout Standard
Any attachment may (optionally) have attributes such as 
\family typewriter
if="${foo}" equals="bar"
\family default
.
 See the section 
\begin_inset CommandInset ref
LatexCommand vref
reference "if-equals"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for the syntax.
\end_layout

\begin_layout Standard
If the body has a content type like 
\family typewriter
text/html; charset=utf-8
\family default
 then it may include tags such as 
\family typewriter
<img src="cid:foo/bar.jpg">
\family default
.
 The tag is most commonly an <img> but can be any tag.
 The system then searches in the static directory for any file with that
 path.
 The file is included with the image, as a 
\begin_inset Quotes eld
\end_inset

related
\begin_inset Quotes erd
\end_inset

 multi-part part, meaning the file is available to the HTML document when
 its rendered in the email client.
\end_layout

\begin_layout Standard
If your application has one or more email tasks, there also needs to be
 application-wide configuration about the email server.
 This is the file 
\family typewriter
email-sending-configuration.xml
\family default
 in the root of the application.
 See the example application for an example of this file.
 
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Making-an-HTTP-Request"

\end_inset

Making an HTTP Request
\end_layout

\begin_layout Standard
The configuration of the task looks like:
\end_layout

\begin_layout LyX-Code
<task class="endpoints.task.HttpRequestTask">
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- mandatory -->
\end_layout

\begin_layout LyX-Code
  <url>http://www.google.com/foo/${param}</url>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- optional, default GET -->
\end_layout

\begin_layout LyX-Code
  <method name="POST"/>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- zero or more -->
\end_layout

\begin_layout LyX-Code
  <get-parameter name="foo">${param}</get-parameter>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- zero or more -->
\end_layout

\begin_layout LyX-Code
  <request-header name="foo">${param}</request-header>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- optional -->
\end_layout

\begin_layout LyX-Code
  <basic-access-authentication
\end_layout

\begin_layout LyX-Code
    username="${param}" password="${param}">
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- either one or more <post-parameter>, 
\end_layout

\begin_layout LyX-Code
       one <xml-body>, one <json-body>, 
\end_layout

\begin_layout LyX-Code
       or nothing.
 See below.
 -->
\end_layout

\begin_layout LyX-Code
</task>
\end_layout

\begin_layout Standard
This task performs an HTTP request, checks the response is a 2xx OK, and
 ignores the response body.
\end_layout

\begin_layout Standard
Redirects are not followed.
\end_layout

\begin_layout Standard
Note that tasks are executed in parallel.
 So if one HTTP request depends on another previous one having completed
 first, that will not work.
\end_layout

\begin_layout Standard
The attribute 
\family typewriter
ignore-if-error="true"
\family default
 may be present on the <task> element to indicate that if an error occurs
 (e.g.
\begin_inset space \space{}
\end_inset

server not found, non-2xx response, etc.)
\begin_inset space \space{}
\end_inset

this error is ignored.
 By default, the error aborts the processing of the endpoint.
\end_layout

\begin_layout Paragraph
Request Body
\end_layout

\begin_layout Standard
One of the following body tags may be present:
\end_layout

\begin_layout Itemize
No content tag, in which case an empty request is sent.
\end_layout

\begin_layout Itemize
One or more POST parameters, specified like:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<post-parameter name="foo">${param}</post-parameter>
\end_layout

\end_deeper
\begin_layout Itemize
XML with inline contents.
 An element like the following may be present inside the 
\family typewriter
<task>
\family default
: 
\end_layout

\begin_deeper
\begin_layout LyX-Code
<xml-body
\family typewriter
 upload-files="true"
\family default
>
\end_layout

\begin_layout LyX-Code
  <your-tag>${param}</your-tag>
\end_layout

\begin_layout LyX-Code
</xml-body>
\end_layout

\begin_layout Standard
Parameters like 
\family typewriter
${foo}
\family default
 will be expanded.
\end_layout

\begin_layout Standard
The optional attribute 
\family typewriter
upload-files="true"
\family default
 indicates that any element with attributes such as 
\family typewriter
<foo upload-field-name="foo" encoding="base64">
\family default
 is filled in with the contents of the uploaded file with that filename
 in that encoding, and acquires the attribute 
\family typewriter
filename
\family default
.
 The encoding is always base64, no other encodings are supported.
\end_layout

\begin_layout Standard
The optional attribute 
\family typewriter
expand-transformations="true"
\family default
 indicates that any element with attributes such as 
\family typewriter
<foo xslt-transformation="foo" encoding="base64">
\family default
 indicates that the transformation with that name should be executed (for
 example, generate a PDF file), and the contents of the resulting file should
 be placed in this tag.
 The encoding is always base64, no other encodings are supported.
\end_layout

\end_deeper
\begin_layout Itemize
XML whose contents are result of XSLT.
 An element like the following may be present inside the 
\family typewriter
<task>:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<xml-body xslt-file="foo.xslt" upload-files="true"/>
\end_layout

\begin_layout Standard
The XSLT file is taken from the 
\family typewriter
http-xslt
\family default
 directory.
 
\end_layout

\begin_layout Standard
The optional attribute 
\family typewriter
upload-files="true"
\family default
 and 
\family typewriter
expand-transformations="true"
\family default
 may be present as above.
\end_layout

\begin_layout Standard
The XSLT takes a 
\family typewriter
<parameters>
\family default
 as its input document; see the 
\family typewriter
<parameters/>
\family default
 section in data sources in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "<parameters/>"

\end_inset

 for more information on the format.
\end_layout

\begin_layout Standard
This XSLT does not have access to the results of any other data sources.
 The reason is, that the same syntax is used from HTTP data sources, and
 data sources cannot use data produced by another data source.
\end_layout

\end_deeper
\begin_layout Itemize
JSON with inline content.
 The following element may be present inside the 
\family typewriter
<task>
\family default
:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<json-body>
\end_layout

\begin_layout LyX-Code
   { "key": "${param}" }
\end_layout

\begin_layout LyX-Code
</json-body>
\end_layout

\begin_layout Standard
The JSON is expressed as text within the XML.
\end_layout

\begin_layout Standard
Parameters like 
\family typewriter
${foo}
\family default
 may be present in string elements in the JSON; they are expanded.
 They are expanded within the string context of JSON, that is to say that
 no concern about escaping is necessary.
\end_layout

\end_deeper
\begin_layout Itemize
JSON whose contents are result of XSLT.
 An element like the following may be present inside the 
\family typewriter
<task>:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<json-body xslt-file="foo.xslt"/>
\end_layout

\begin_layout Standard
The XSLT file is taken from the 
\family typewriter
http-xslt
\family default
 directory.
 
\end_layout

\begin_layout Standard
The XSLT file must produce text with 
\family typewriter
<xsl:output method="text"/>
\family default
.
 The text is interpreted as JSON.
 Be careful with including parameters; they must be escaped to be valid
 JSON syntax.
 Ideally replace backslash with two backslashes, then replace double-quotes
 with backslash then double-quote.
\end_layout

\begin_layout Standard
As with the XML from XSLT, the XSLT takes a 
\family typewriter
<parameters>
\family default
 as its input document, and this XSLT does not have access to the results
 of any other data sources.
\end_layout

\end_deeper
\begin_layout Paragraph
Parsing Response and Producing Intermediate Values
\end_layout

\begin_layout Standard
Either of the following syntaxes may be optionally used, to produce output
 intermediate values:
\end_layout

\begin_layout LyX-Code
<task class="endpoints.task.HttpRequestTask">
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
  <output-intermediate-value 
\end_layout

\begin_layout LyX-Code
      name="invoice-number"
\end_layout

\begin_layout LyX-Code
      xpath="/foo/bar"
\end_layout

\begin_layout LyX-Code
      regex="
\backslash
d+"/>
\end_layout

\begin_layout LyX-Code
</task>
\end_layout

\begin_layout LyX-Code
<task class="endpoints.task.HttpRequestTask">
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
  <output-intermediate-value 
\end_layout

\begin_layout LyX-Code
      name="invoice-number"
\end_layout

\begin_layout LyX-Code
      jsonpath="$.invoiceNumbers[:1].value"
\end_layout

\begin_layout LyX-Code
      regex="
\backslash
d+"/>
\end_layout

\begin_layout LyX-Code
</task>
\end_layout

\begin_layout Standard
The former requires that the result of the response be XML, the latter that
 it be JSON.
 No attempt is made to convert the response between XML and JSON.
\end_layout

\begin_layout Standard
The 
\family typewriter
regex
\family default
 attribute is optional.
\end_layout

\begin_layout Subsubsection
Creating a 
\begin_inset Quotes eld
\end_inset

Short Link To Endpoint
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Some email programs may have issues with long links.
 Links to endpoints (containing all parameters) may get long, so this can
 become a problem.
 The 
\begin_inset Quotes eld
\end_inset

Short Link To Endpoint
\begin_inset Quotes erd
\end_inset

 feature allows shorter links to endpoints (including all parameters) to
 be created.
 This is analogous to 
\begin_inset Quotes eld
\end_inset

Forward To Endpoint
\begin_inset Quotes erd
\end_inset

, with the exception that rather than the destination endpoint getting executed
 immediately, a link is created to the processing of that endpoint.
\end_layout

\begin_layout Standard
The task described in this section creates a short-link in the database
 with a random code.
 The resulting full link, including the code and also including the base
 URL of the current installation of Endpoints, is written to an output intermedi
ate variable.
\end_layout

\begin_layout Standard
Use a syntax like the following to create a short link to an endpoint in
 the variable 
\family typewriter
${link}
\family default
.
\end_layout

\begin_layout LyX-Code
<task 
\end_layout

\begin_layout LyX-Code
   class="endpoints.task.CreateShortLinkToEndpointTask" 
\end_layout

\begin_layout LyX-Code
   destination-endpoint-name=
\begin_inset Quotes qrd
\end_inset

my-other-endpoint
\begin_inset Quotes qrd
\end_inset


\end_layout

\begin_layout LyX-Code
   output-intermediate-value=
\begin_inset Quotes qrd
\end_inset

link
\begin_inset Quotes qrd
\end_inset


\end_layout

\begin_layout LyX-Code
   expires-in-minutes=
\begin_inset Quotes qrd
\end_inset

1440
\begin_inset Quotes qrd
\end_inset

/>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<success>
\end_layout

\begin_layout LyX-Code
   <input-intermediate-value name="link"/>
\end_layout

\begin_layout LyX-Code
   ...
\end_layout

\begin_layout LyX-Code
</success>
\end_layout

\begin_layout Subsubsection
Capturing Expressions for the Request Log
\end_layout

\begin_layout Standard
A syntax like the following may be used to save text strings to the request
 log, which are then visible in the Service Portal web interface and also
 in the 
\family typewriter
<request-log>
\family default
 data source command.
\end_layout

\begin_layout LyX-Code
<task class="endpoints.task.RequestLogExpressionCaptureTask" 
\end_layout

\begin_layout LyX-Code
   key=
\begin_inset Quotes qrd
\end_inset

my-name
\begin_inset Quotes qrd
\end_inset

 value=
\begin_inset Quotes qrd
\end_inset

the ${foo} is ${bar}" />
\end_layout

\begin_layout Standard
The 
\family typewriter
key
\family default
 may not contain parameters or intermediate variables, whereas the 
\family typewriter
value
\family default
 may contain parameters and intermediate variables.
\end_layout

\begin_layout Subsubsection
Custom Task
\end_layout

\begin_layout Standard
You may define your own Java classes which extend the 
\family typewriter
Task
\family default
 superclass, and reference it in the 
\family typewriter
class
\family default
 attribute of the task element.
\end_layout

\begin_layout Subsection
Transformers
\end_layout

\begin_layout Standard
In the 
\family typewriter
transformers
\family default
 directory under the application, there are zero or more files, each describing
 a transformation.
 In the examples in the previous section referenced a transformation 
\family typewriter
a-transformation
\family default
, in which case there must be a file 
\family typewriter
a-transformation.xml
\family default
 under the 
\family typewriter
transformers
\family default
 directory.
\end_layout

\begin_layout Standard
The root element of each transformer file is 
\family typewriter
<transformer data-source="ds">
\family default
.
 In this example, there must be a file 
\family typewriter
ds.xml
\family default
 in the 
\family typewriter
data-sources
\family default
 directory of the application.
\end_layout

\begin_layout Standard
See the section 
\begin_inset Quotes eld
\end_inset

Transformers
\begin_inset Quotes erd
\end_inset

 in the 
\begin_inset Quotes eld
\end_inset

Offer Ready XSLT Library
\begin_inset Quotes erd
\end_inset

 definition for more info on the contents of this file, at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/OpenEndpoints/xslt-library
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Writing Transformation Input/Output to AWS S3
\end_layout

\begin_layout Standard
In addition, there is the possibility of adding instructions to output the
 input/output of the transformation to AWS S3.
\end_layout

\begin_layout LyX-Code
<transformer data-source="spheres-fo">
\end_layout

\begin_layout LyX-Code
  <write-input-to-aws-s3>
\end_layout

\begin_layout LyX-Code
    <folder>foo/bar</folder> <!-- optional -->
\end_layout

\begin_layout LyX-Code
    <tag name="foo">bar</tag> 
\end_layout

\begin_layout LyX-Code
    <tag name="abc">def</tag> 
\end_layout

\begin_layout LyX-Code
  </write-input-to-aws-s3>
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
  <write-output-to-aws-s3> 
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
  </write-output-to-aws-s3>
\end_layout

\begin_layout LyX-Code
</transformer>
\end_layout

\begin_layout Standard
This creates objects in the S3 bucket which have the tags as specified,
 the correct Content-Type, and in addition a tag called 
\family typewriter
environment
\family default
 which is either 
\family typewriter
preview
\family default
 or 
\family typewriter
live
\family default
.
\end_layout

\begin_layout Subsection
Data Sources
\end_layout

\begin_layout Standard
A data source is a list of commands (e.g.
 fetch XML from URL) which produce XML.
 Each data source is executed, and the results are appended into an XML
 document (e.g.
 fetch XML from two URLs, then the result of the data source will be an
 XML document with two child elements, which are the XML fetched from the
 two URLs).
\end_layout

\begin_layout Standard
The resulting XML document has the root tag 
\family typewriter
<transformation-input>
\family default
.
 The results of the command are appended, in order, directly underneath
 this tag.
\end_layout

\begin_layout Standard
The data source file contains the 
\family typewriter
<data-source>
\family default
 root element then any number of the following elements in any order:
\end_layout

\begin_layout Description

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "<parameters/>"

\end_inset

<parameters/>
\family default
 Produces an XML structure listing all parameters of the current request,
 in a format like:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<parameters>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- Info on every GET/POST parameter -->
\end_layout

\begin_layout LyX-Code
  <parameter name="offer-id" value="OA-00023"/>
\end_layout

\begin_layout LyX-Code
  ...
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- Info on every visible intermediate value -->
\end_layout

\begin_layout LyX-Code
  <intermediate-value name="offer-id" value="OA-00023"/>
\end_layout

\begin_layout LyX-Code
  ...
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- Info on every non-XML file upload -->
\end_layout

\begin_layout LyX-Code
  <file-upload field-name="foo"
\end_layout

\begin_layout LyX-Code
               upload-filename="foo.jpg"/>
\end_layout

\begin_layout LyX-Code
  ...
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

  <!-- Info on every XML file upload -->
\end_layout

\begin_layout LyX-Code
  <file-upload field-name="bar"
\end_layout

\begin_layout LyX-Code
               upload-filename="foo.xml">
\end_layout

\begin_layout LyX-Code
    <xyz><!-- whatever is in uploaded file --></xyz>
\end_layout

\begin_layout LyX-Code
  </file-upload>
\end_layout

\begin_layout LyX-Code
  ...
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

</parameters>
\end_layout

\begin_layout Standard
If a file upload contains XML, the 
\family typewriter
<file-upload>
\family default
 has a single child which is the root element of the XML file; otherwise
 the 
\family typewriter
<file-upload>
\family default
 element is empty.
\end_layout

\begin_layout Standard
Whether a file upload is XML or not is determined by whether the XML can
 be parsed as XML.
 The uploaded filename and Content Type are ignored, to allow files such
 as SVGs which don't have an XML extension nor an XML Content Type.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<on-demand-incrementing-number
\begin_inset space ~
\end_inset

type="month"/>
\family default
 This command fetches a new auto-increment value.
 The value is only 
\begin_inset Quotes eld
\end_inset

consumed
\begin_inset Quotes erd
\end_inset

 if the endpoints request is successful; if the request is not successful
 the number is again made available to future requests.
 The numbers do not have any “holes” or missed-out numbers, so are suitable
 for use in invoice numbers.
 The term “on-demand” refers to the fact the number does not get consumed
 unless it is requested.
 The numbers are unique within the application.
 The 
\family typewriter
type
\family default
 attribute may take the values 
\family typewriter
perpetual
\family default
, 
\family typewriter
year
\family default
 or 
\family typewriter
month
\family default
.
 If one value (e.g.
\begin_inset space \space{}
\end_inset


\family typewriter
month
\family default
) is consumed, other values (e.g.
\begin_inset space \space{}
\end_inset


\family typewriter
year
\family default
) are not automatically consumed as well.
 If the data source is used twice within the same request, they both see
 the same number.
\end_layout

\begin_layout Description

\family typewriter
<application-introspection/>
\family default
 The data source command XML element is empty.
 It produces as its output an 
\family typewriter
<application-introspection>
\family default
 element, which describes the entire application directory structure, containing
:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
<directory
\begin_inset space ~
\end_inset

name="x"> 
\family default
Contains sub-elements of these three types.
\end_layout

\begin_layout Description

\family typewriter
<file
\begin_inset space ~
\end_inset

name="x"/> 
\family default
For files not called 
\family typewriter
*.xml
\family default
, empty element.
\end_layout

\begin_layout Description

\family typewriter
<xml-file
\begin_inset space ~
\end_inset

name="x"> 
\family default
For files called 
\family typewriter
*.xml
\family default
.
 The XML contents of the file is placed inside this element, apart from
 if this file is an application-from-xml file.
\end_layout

\begin_deeper
\begin_layout Standard
Parameters like 
\family typewriter
${foo}
\family default
 found in the file are not expanded.
 If a file named 
\family typewriter
*.xml
\family default
 does not in fact contain XML, this is an error.
 
\end_layout

\begin_layout Standard
If the file is in the 
\family typewriter
xml-from-application
\family default
 directory, the file's contents are not placed inside the tag.
 This is because these files are often very large.
 If access is needed to an application-from-xml file, the 
\family typewriter
<application-from-xml>
\family default
 data source can be used in addition to this one.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description

\family typewriter
<literal-xml>
\family default
 The contents of the element are placed in the output.
 Parameters like 
\family typewriter
${foo}
\family default
 are expanded in the bodies of elements, and in all attributes.
\end_layout

\begin_layout Description

\family typewriter
<xml-from-url>
\family default
 This will fetch content from a URL.
 The data source command has sub-elements with the same format as the 
\family typewriter
HttpRequestTask
\family default
 described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Making-an-HTTP-Request"

\end_inset

.
 
\end_layout

\begin_deeper
\begin_layout Standard
The optional 
\family typewriter
<xml-from-url 
\series bold
ignore-if-error="true"
\series default
>
\family default
 attribute may be present.
\end_layout

\begin_layout Standard
If XML is received then that XML is the result of this data source.
 If JSON is received then it is converted to XML with a root element 
\family typewriter
<response>
\family default
, with any characters which would be illegal in XML (for example element
 name starting with a digit) replaced by 
\family typewriter
_xxxx_
\family default
 containing their hex unicode character code.
 If HTML is received then it is converted to XML.
 If no content is received then 
\family typewriter
<empty-response/>
\family default
 is the result of this data source.
 Otherwise, error.
\end_layout

\begin_layout Standard
Parameters like 
\family typewriter
${foo}
\family default
 are expanded in the resulting XML.
 To prevent expansion, use the attribute 
\family typewriter
<xml-from-url 
\series bold
expand-parameters-in-response="false"
\series default
>
\family default
.
 
\end_layout

\begin_layout Standard
The optional 
\family typewriter
<xml-from-url 
\series bold
tag="xyz"
\series default
>
\family default
 attribute may be present, meaning the response in the output is wrapped
 in an 
\family typewriter
<xyz>
\family default
 tag.
 Otherwise, the XML is included as is, without being wrapped.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<xml-from-database
\begin_inset space ~
\end_inset

tag="x">
\family default
 The optional attribute 
\begin_inset Quotes eld
\end_inset

tag
\begin_inset Quotes erd
\end_inset

 specifies what the tag in the output XML should be called; by default this
 is 
\family typewriter
<xml-from-database>
\family default
.
 
\end_layout

\begin_deeper
\begin_layout Standard
The command has the following child elements:
\end_layout

\begin_layout Description

\family typewriter
<jdbc-connection-string>
\family default
 Mandatory.
 Specifies how to connect to the database to perform the query.
 It can either contain a JDBC URL in its body, or it can have an attribute
 like 
\family typewriter
from-environment-variable="foo"
\family default
 in which case that environment variable must contain the JDBC URL.
\end_layout

\begin_deeper
\begin_layout Standard
Note that parameters like 
\family typewriter
${foo}
\family default
 are not expanded.
\end_layout

\begin_layout Standard
Currently MySQL and PostgreSQL are supported.
 Other databases would require other client JARs that are not provided.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<sql>
\family default
 Mandatory whose body is the SQL to execute e.g.
 
\family typewriter
SELECT * FROM foo WHERE id=?
\family default
.
 
\end_layout

\begin_deeper
\begin_layout Standard
Parameters like 
\family typewriter
${foo}
\family default
 are not expanded as that would allow SQL injection attacks.
 Use a ? in the 
\family typewriter
<sql>
\family default
 field and add a 
\family typewriter
<param>
\family default
 instead.
\end_layout

\begin_layout Standard
For PostgreSQL, for non-string parameters, 
\family typewriter
?::int
\family default
 or 
\family typewriter
?::uuid
\family default
 are necessary to cast the string supplied by Endpoints into the right type
 for PostgreSQL.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<param>
\family default
 Zero or more elements, whose body are the contents of any 
\family typewriter
?
\family default
 in the 
\family typewriter
<sql>
\family default
 element.
 Parameters like 
\family typewriter
${foo}
\family default
 are expanded.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<xml-from-application
\begin_inset space ~
\end_inset

file="path/to/file/x.xml"/>
\family default
 This looks in the directory 
\family typewriter
xml-from-application
\family default
 in the application.
\end_layout

\begin_deeper
\begin_layout Standard
Parameters like 
\family typewriter
${foo}
\family default
 are are expanded in the bodies of elements, and in all attributes.
\end_layout

\begin_layout Standard
The optional attribute 
\family typewriter
ignore-if-not-found="true"
\family default
 may be present to indicate that if the file is not found, the data source
 command is ignored.
 By default, the file not being found is an error.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<md5
\begin_inset space ~
\end_inset

id="x"
\begin_inset space ~
\end_inset

message-string="x"/>
\family default
 This takes the message string, expands parameters like 
\family typewriter
${foo}
\family default
, and performs an MD5 Hex hash on it.
 The result is written to a 
\family typewriter
<hash>
\family default
 element whose body is the hash.
 The optional attribute 
\family typewriter
id
\family default
 on the command is written into the output element, with parameters like
 
\family typewriter
${foo}
\family default
 expanded.
\end_layout

\begin_layout Description

\family typewriter
<request-log>
\family default
 This outputs all request log entries for the current application.
 Only entries for the current environment are returned (e.g.
\begin_inset space \space{}
\end_inset

if the incoming request is for the preview environment, only request log
 entries from the preview environment are returned.) Request log entries
 are deleted after a certain period of time, and thus request log entries
 which have not been deleted are returned.
 See the 
\family typewriter
RequestLogCommand
\family default
 Java class for more informaion on which fields are returned in which format.
\end_layout

\begin_layout Description

\family typewriter
<aws-s3-keys>
\family default
 This lists the most recent object keys (filenames) out of the AWS S3 bucket
 specified in the 
\family typewriter
aws-s3-configuration.xml
\family default
 file (see example-customer for example format.).
 
\begin_inset Quotes eld
\end_inset

Most recent
\begin_inset Quotes erd
\end_inset

 means the keys of the objects with the most recent last modified timestamp.
 The command looks like:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<aws-s3-keys limit="100">
\end_layout

\begin_layout LyX-Code
  <folder>foo/bar</folder> <!-- optional -->
\end_layout

\begin_layout LyX-Code
  <match-tag name="foo">bar</match-tag> 
\end_layout

\begin_layout LyX-Code
  <match-tag name="abc">def</match-tag> 
\end_layout

\begin_layout LyX-Code
</aws-s3-keys>
\end_layout

\begin_layout Standard
and the results look like:
\end_layout

\begin_layout LyX-Code
<aws-s3-keys>
\end_layout

\begin_layout LyX-Code
   <object key="xyz.xml"/>
\end_layout

\begin_layout LyX-Code
   ...
\end_layout

\begin_layout LyX-Code
</aws-s3-keys>
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<aws-s3-object>
\family default
 This reads a particular object (file) from AWS S3.
 It is assumed that this file contains XML data.
 The command looks like:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<aws-s3-object key="folder/foo.xml"/>
\end_layout

\begin_layout Standard
and the results look like:
\end_layout

\begin_layout LyX-Code
<aws-s3-object key="folder/foo.xml">
\end_layout

\begin_layout LyX-Code
  ...
 file contents (XML) ...
\end_layout

\begin_layout LyX-Code
</aws-s3-object>
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<command
\begin_inset space ~
\end_inset

class="x">
\family default
 Any Java class you wish to write, which can produce XML.
 It should extend the Java class 
\family typewriter
DataSourceCommand
\family default
.
 
\end_layout

\begin_layout Subsubsection
Data Source Post-Processing
\end_layout

\begin_layout Standard
It is possible to add 
\begin_inset Quotes eld
\end_inset

post-processing
\begin_inset Quotes erd
\end_inset

 steps to the following two stages:
\end_layout

\begin_layout Enumerate
After an individual data source has been executed
\end_layout

\begin_layout Enumerate
After all data sources have been executed
\end_layout

\begin_layout Standard
For example, within an 
\family typewriter
<xml-from-url>
\family default
:
\end_layout

\begin_layout LyX-Code
<data-source>
\end_layout

\begin_layout LyX-Code
  <xml-from-url>
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
    <post-process xslt="after-one-1.xslt"/>
\end_layout

\begin_layout LyX-Code
    <post-process xslt="after-one-2.xslt"/>
\end_layout

\begin_layout LyX-Code
  </xml-from-url>
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
  <post-process xslt="after-all-1.xslt"/>
\end_layout

\begin_layout LyX-Code
  <post-process xslt="after-all-2.xslt"/>
\end_layout

\begin_layout LyX-Code
</data-source>
\end_layout

\begin_layout Standard
These XSLT files should be found in the directory 
\family typewriter
data-source-post-processing-xslt
\family default
 in the application directory.
\end_layout

\begin_layout Standard
If the post-processing only needs a single data source as input, prefer
 using the post-processing only on the single data source.
 There is a slight performance advantage, in that post-processing on different
 individual data source elements may be executed in parallel, whereas the
 post-processing after all the data sources have executed must execute sequentia
lly.
\end_layout

\begin_layout Standard
The post-processing takes the elements returned by the data source and returns
 replacement elements to be used in their stead.
 A data source may return more than one element, which is inconvenient from
 the perspective of XML as an XML document must have a single root element.
 Therefore, the elements in and out of the post-processing must be wrapped
 in an extra root tag.
 The XSLTs take a document with the root tag <
\family typewriter
data-source-post-processing-input>
\family default
 and return a document with root tag 
\family typewriter
<data-source-post-processing-output>
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
<success>
\family default
 and 
\family typewriter
<error>
\end_layout

\begin_layout Standard
The 
\family typewriter
<endpoint>
\family default
 has two sub-sections, 
\family typewriter
<success>
\family default
 and 
\family typewriter
<error>
\family default
.
 What happens in the case of success or error depends on one of the following
 tags being present
\end_layout

\begin_layout Description
No
\begin_inset space ~
\end_inset

content If the tag (
\family typewriter
<success>
\family default
 or 
\family typewriter
<error>
\family default
) is missing, or present and empty, this means the server returns an empty
 200 OK in the success case and 400 error in the case of failure.
 This can be useful if the request should simply perform some tasks e.g.
\begin_inset space \space{}
\end_inset

send emails.
\end_layout

\begin_layout Description

\family typewriter
<redirect-to>
\family default
 specifies a redirect that should be performed.
 The body of the 
\family typewriter
<redirect-to>
\family default
 specifies where.
 Parameters like 
\family typewriter
${foo}
\family default
 in the body are replaced.
\end_layout

\begin_deeper
\begin_layout Standard
To prevent a malicious request redirecting somewhere wrong, there are optional
 tags like 
\family typewriter
<redirect-prefix-whitelist-entry>
\begin_inset space \hspace{}
\length 0bp
\end_inset

http://www.google.com
\begin_inset space \hspace{}
\length 0bp
\end_inset

</redirect-prefix-whitelist-entry>
\family default
.
 If no such tag is present, redirect to any URL is allowed.
 If one or more are present, the URL being redirected to must start with
 the prefix of one of them; otherwise this is an error.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<response-from-static
\begin_inset space ~
\end_inset

filename="foo.jpg"/>
\family default
 The response content is fetched from the named file within the 
\family typewriter
static
\family default
 directory.
 Subdirectories such as 
\family typewriter
filename="
\begin_inset space \hspace{}
\length 0bp
\end_inset

subdir/
\begin_inset space \hspace{}
\length 0bp
\end_inset

file.pdf"
\family default
 are supported.
 
\end_layout

\begin_deeper
\begin_layout Standard
Parameters like 
\family typewriter
${foo}
\family default
 are not allowed in the 
\family typewriter
filename
\family default
 attribute.
 This is to prevent accidentally making more files accessible (if the client
 guesses the right filename) than intended.
\end_layout

\begin_layout Standard
If the 
\family typewriter
download-
\begin_inset space \hspace{}
\length 0bp
\end_inset

filename="
\begin_inset space \hspace{}
\length 0bp
\end_inset

invoice-
\begin_inset space \hspace{}
\length 0bp
\end_inset

${invoice-number}.pdf"
\family default
 attribute is present, then the header in the HTTP response is set indicating
 that the file should be downloaded as opposed to displayed in the browser
 window.
 Parameters like 
\family typewriter
${foo}
\family default
 are replaced.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
<response-from-url>
\family default
 An HTTP request is perfomed and the result of this request is streamed
 back to the client as the response of the call to Endpoints.
 The 
\family typewriter
<response-from-url>
\family default
 element must have children such as 
\family typewriter
<url>
\family default
, as described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Making-an-HTTP-Request"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The 
\family typewriter
download-
\begin_inset space \hspace{}
\length 0bp
\end_inset

filename
\family default
 attribute may be set as described above.
\end_layout

\begin_layout Description

\family typewriter
<response-
\begin_inset space \hspace{}
\length 0bp
\end_inset

transformation
\begin_inset space ~
\end_inset

name="a-transformation"/>
\family default
 specifies that the transformation named in the attribute is performed,
 and its contents are returned to the client in the HTTP response.
 See below for how transformers are defined.
 For example, the transformation might produce HTML to be displayed in the
 browser, or a PDF to be downloaded.
 The 
\family typewriter
download-
\begin_inset space \hspace{}
\length 0bp
\end_inset

filename
\family default
 attribute may be set as described above.
\end_layout

\begin_layout Description

\family typewriter
<ooxml-parameter-expansion
\begin_inset space ~
\end_inset

source="foo.docx"
\begin_inset space ~
\end_inset

download-filename="bar.docx"/>
\family default
 This will read in the file 
\begin_inset Quotes eld
\end_inset

foo.docx
\begin_inset Quotes erd
\end_inset

 from the 
\begin_inset Quotes eld
\end_inset

ooxml-responses
\begin_inset Quotes erd
\end_inset

 directory under the Endpoint's configuration and replace any 
\family typewriter
${foo}
\family default
 variables in the document's body, and deliver it.
 Only DOCX is supported; DOC is not supported.
 The download will be presented to the user with the default download filename
 
\begin_inset Quotes eld
\end_inset

bar.docx
\begin_inset Quotes erd
\end_inset

; the latter may contain parameters.
\end_layout

\begin_layout Description

\family typewriter
<forward-to-endpoint
\begin_inset space ~
\end_inset

endpoint-name="foo"/>
\family default
 then that endpoint (e.g.
\begin_inset space \space{}
\end_inset


\family typewriter
foo
\family default
) is executed and the result of that endpoint (e.g.
\begin_inset space \space{}
\end_inset


\family typewriter
foo
\family default
) is returned as the result of the call being processed.
 
\end_layout

\begin_deeper
\begin_layout Standard
All parameters are forwarded to the new endpoint.
 (In the past there was a syntax like 
\family typewriter
<input-parameter name="p">${param}</input-parameter>
\family default
.
 It is still supported for backwards compatibility.) The user agent, client
 IP address and file uploads are all available endpoint forwarded to.
\end_layout

\begin_layout Standard
It's possible to chain the execution of any number of endpoints in this
 manner (e.g.
 endpoint 
\family typewriter
e1
\family default
 forwards to 
\family typewriter
e2
\family default
 which itself forwards to 
\family typewriter
e3
\family default
).
 A circular chain of such references is not allowed as the processing of
 such a chain would never end.
\end_layout

\begin_layout Standard
Only one 
\begin_inset Quotes eld
\end_inset

request log
\begin_inset Quotes erd
\end_inset

 gets written, despite a chain of multiple endpoints being processed.
 Only the first 
\begin_inset Quotes eld
\end_inset

parameter transformation input/output
\begin_inset Quotes erd
\end_inset

 is saved with that 
\begin_inset Quotes eld
\end_inset

request log
\begin_inset Quotes erd
\end_inset

 entry, despite each endpoint in the chain potentially having its own parameter
 transformation.
\end_layout

\begin_layout Standard
Placing 
\family typewriter
<forward-to-endpoint>
\family default
 inside 
\family typewriter
<error>
\family default
 is not supported, as this would require 
\begin_inset Quotes eld
\end_inset

auto increment
\begin_inset Quotes erd
\end_inset

 numbers to be  assigned even in the case of 
\family typewriter
<error>
\family default
 (as any arbitrary endpoint might be called, which might require them).
 It is an explicit design goal to only support auto-increment numbers (e.g.
\begin_inset space \space{}
\end_inset

for invoice numbers) in the case of 
\family typewriter
<success>
\family default
.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

redirect
\begin_inset Quotes erd
\end_inset

 from one endpoint to another happens within the Endpoints software; no
 redirect is actually sent to the user's browser.
\end_layout

\end_deeper
\begin_layout Standard
The 
\family typewriter
<success>
\family default
 processing happens, by default, in parallel with the processing of tasks,
 in order to reduce the duration of the request and deliver a faster response.
 To declare that the 
\family typewriter
<success>
\family default
 must be processed after a particular task, specify dependencies using 
\family typewriter
<after>
\family default
 elements as specified in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:after"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and 
\family typewriter
<input-intermedate-value>
\family default
 as specified in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Intermediate-Values"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Multiple 
\family typewriter
<success>
\family default
 options
\end_layout

\begin_layout Standard
Different results may be required for the same endpoint based on certain
 criteria.
 It is possible to define any number of success elements such as:
\end_layout

\begin_layout LyX-Code
<success if="${foo}" equals="bar"> ....
 </success>
\end_layout

\begin_layout LyX-Code
<success if="${bar}" equals="baz"> ....
 </success>
\end_layout

\begin_layout LyX-Code
<success> ...
 </success>
\end_layout

\begin_layout Standard
The conditions are considered in the order they're written in the file,
 so put more general 
\begin_inset Quotes eld
\end_inset

catch-all
\begin_inset Quotes erd
\end_inset

 items at the bottom and more specific 
\begin_inset Quotes eld
\end_inset

if...
\begin_inset Quotes erd
\end_inset

 items at the top.
 The syntax for 
\family typewriter
if
\family default
 and 
\family typewriter
equals
\family default
 is described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "if-equals"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection

\family typewriter
<error>
\family default
 Parameters
\end_layout

\begin_layout Standard
The 
\family typewriter
<error>
\family default
 tag may not use parameters supplied by the client, as an error might have
 happened during parameter transformation, and therefore parameters are
 not necessarily available.
 The 
\begin_inset Quotes eld
\end_inset

System Parameters
\begin_inset Quotes erd
\end_inset

 described above are available.
 And in addition, for the processing of the 
\family typewriter
<error>
\family default
 tag there are the following additional parameters are available:
\end_layout

\begin_layout Description

\family typewriter
${internal-error-text}
\family default
 This contains an internal error message.
 It is important this is not exposed to any end customer, as it might contain
 security-sensitive information such as 
\begin_inset Quotes eld
\end_inset

cannot connect to database at IP address 1.2.3.4
\begin_inset Quotes erd
\end_inset

 etc.
\end_layout

\begin_layout Description

\family typewriter
${parameter-transformation-error-text}
\family default
 In case the request failed because the parameter transformation failed,
 and a message was set in the <error> tag in its output.
\end_layout

\begin_layout Subsection

\family typewriter
email-sending-configuration.xml
\end_layout

\begin_layout Standard
The file has the root element 
\family typewriter
<email-sending-configuration>
\family default
 and have 
\emph on
one
\emph default
 of the following sets of sub-elements:
\end_layout

\begin_layout Itemize
Only 
\family typewriter
<mx-address>
\family default
 containing an address for MX DNS lookup.
 The resulting host is connected to on the standard email port, without
 TLS.
\end_layout

\begin_layout Itemize
Only 
\family typewriter
<server>
\family default
 containing the hostname to connect to.
 Optional 
\family typewriter
<port>
\family default
 element.
\end_layout

\begin_layout Itemize

\family typewriter
<server>
\family default
, 
\family typewriter
<username>
\family default
, 
\family typewriter
<password>
\family default
 in which case TLS is used.
 Optional 
\family typewriter
<port>
\family default
 element.
\end_layout

\begin_layout Standard
In addition, the root element may contain zero or more 
\family typewriter
<header name='foo'>
\begin_inset space \hspace{}
\length 0bp
\end_inset

value
\begin_inset space \hspace{}
\length 0bp
\end_inset

</header>
\family default
 elements.
 These are extra headers which are written into every email sent via SMTP,
 for example authorization headers for a commercial email sending service.
\end_layout

\begin_layout Subsection

\family typewriter
aws-s3-configuration.xml
\end_layout

\begin_layout Standard
This file is optional, unless any AWS S3 features are used in which case
 it's mandatory.
 It looks like:
\end_layout

\begin_layout LyX-Code
<aws-s3-configuration>
\end_layout

\begin_layout LyX-Code
    <bucket>bucketname</bucket>
\end_layout

\begin_layout LyX-Code
</aws-s3-configuration>
\end_layout

\begin_layout Subsection

\family typewriter
service-portal-endpoint-menu-items.xml
\end_layout

\begin_layout Standard
The Service Portal may have additional per-application menu items.
\end_layout

\begin_layout LyX-Code
<
\family typewriter
service-portal-endpoint-menu-items
\family default
>
\end_layout

\begin_layout LyX-Code
  <menu-folder menu-item-name="A Folder">
\end_layout

\begin_layout LyX-Code
    <form menu-item-name="A Form"
\end_layout

\begin_layout LyX-Code
        form-endpoint="form-endpoint" 
\end_layout

\begin_layout LyX-Code
        result-endpoint="processing"/> 
\end_layout

\begin_layout LyX-Code
    <content menu-item-name="Some Content" 
\end_layout

\begin_layout LyX-Code
        endpoint="content-endpoint"> 
\end_layout

\begin_layout LyX-Code
      <environment name="preview"/>
\end_layout

\begin_layout LyX-Code
    </content>
\end_layout

\begin_layout LyX-Code
  </menu-folder>
\end_layout

\begin_layout LyX-Code
  <content menu-item-name="Some Content Outside a Folder" 
\end_layout

\begin_layout LyX-Code
      endpoint="content-endpoint"/>
\end_layout

\begin_layout LyX-Code
<
\family typewriter
/service-portal-endpoint-menu-items
\family default
>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
The menu items may be arranged in a hierarchy of folders and leaf nodes.
 Each menu item has a name (displayed in the navigation).
 Each menu item is one of the following:
\end_layout

\begin_layout Description
Content An endpoint renders content, which is displayed in the body of the
 page.
\end_layout

\begin_layout Description
Form An endpoint renders a form, which is displayed.
 The user fills out fields in the form, presses submit, and a second endpoint
 renders a result.
 The form may include file uploads.
\end_layout

\begin_layout Standard
As some items do not make sense to be displayed on preview and live (for
 example, an endpoint which simply queries a database), it is possible to
 mark an endpoint as being only available on preview or live with an element
 like 
\family typewriter
<environment name="preview"/>
\family default
.
 If no such element is present, the menu item is available on all environments.
 Either folders or leaf nodes may be so marked.
\end_layout

\begin_layout Standard
Regarding the content that an endpoint displays:
\end_layout

\begin_layout Itemize
The content displayed by the endpoint referenced by a 
\family typewriter
<content>
\family default
 must be a HTML snippet or a download.
 The 
\family typewriter
result-endpoint
\family default
 of a 
\family typewriter
<form>
\family default
 must also be an HTML snippet or a download.
 The 
\family typewriter
form-endpoint
\family default
 of a 
\family typewriter
<form>
\family default
 must be a HTML snippet.
\end_layout

\begin_layout Itemize
The HTML snippet for the form should not include the HTML 
\family typewriter
<form>
\family default
 tag nor any kind of button.
 It should just contain HTML and 
\family typewriter
<input>
\family default
 elements.
 The HTML form, and the submit button, are rendered by Wicket.
\end_layout

\begin_layout Itemize
The HTML must be returned as UTF-8 and this must be explicitly marked in
 the content type, such as 
\begin_inset Quotes eld
\end_inset

text/html; charset=utf-8
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Redirects and 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 responses (where the 
\family typewriter
<success>
\family default
 or 
\family typewriter
<error>
\family default
 tag are missing from the endpoint's definition) are not supported.
\end_layout

\begin_layout Itemize
Any other display format, for example JSON or plain text, is not supported.
\end_layout

\begin_layout Standard
No hash calculations are performed.
\end_layout

\begin_layout Standard
In order to make the display and execution of an endpoint by the Service
 Portal as similar as possible to the normal execution of an endpoint, increment
al IDs are assigned, request log entries are written, tasks are executed,
 and if 
\family typewriter
<success>
\family default
 is not successful, the 
\family typewriter
<error>
\family default
 is executed and displayed.
\end_layout

\begin_layout Standard
In the case that the result of an endpoint is a download, a download button
 is displayed (the download is not immediately triggered).
 This is because it would be strange to click on a left navigation item
 in a piece of software and have a download immediately triggered (the user
 expects a page when they click on a navigation point).
 Because it's not possible to determine in advance whether the endpoint
 will display content or a download (e.g.
\begin_inset space \space{}
\end_inset


\family typewriter
<success>
\family default
 could be a download, 
\family typewriter
<error>
\family default
 could be content), in the case of a download the resulting file is cached
 by Wicket; when the user clicks the [download] button the content is downloaded.
 (An alternative would be, determine that the endpoint returns a download,
 display the button, then when the user clicks it run the endpoint again
 to generate the content.
 But that would cause multiple request-log entries.)
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:singleapp"

\end_inset

Via Docker, with a Single Application
\end_layout

\begin_layout Standard
Rather than using the 
\begin_inset Quotes eld
\end_inset

publish
\begin_inset Quotes erd
\end_inset

 mechanism, it is possible to create a Docker image which already contains
 a single application, and into which no further publish is possible.
 (Philosophically, there is no need for Endpoints to provide a publish mechanism
 as the Docker image mechanism does this job.)
\end_layout

\begin_layout Standard
The database is still needed, for example for the request log.
\end_layout

\begin_layout Standard
A Dockerfile such as the following can be used to create a Docker image
 running a single application:
\end_layout

\begin_layout LyX-Code
FROM offerready/endpoints-he
\end_layout

\begin_layout LyX-Code
COPY application /var/endpoints/fixed-application
\end_layout

\begin_layout Standard
The URLs served by the application have the normal format, that is to say
 the application name must be specified, even though there is and can only
 ever be one application with this setup.
 The requests must use the application with the fixed name name 
\family typewriter
endpoints
\family default
, and must be for the default (live) environment.
\end_layout

\begin_layout Subsection
Environment variables
\end_layout

\begin_layout Subsubsection
Single Application Mode
\end_layout

\begin_layout Standard
The following environment variables are mandatory in Single Application
 Mode:
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_BASE_URL 
\family default
With trailing slash, for example 
\family typewriter
https://endpoints.offer-ready.com/
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_JDBC_URL
\family default
 Points to a PostgreSQL database.
 For example 
\family typewriter
jdbc:
\begin_inset space \hspace{}
\length 0bp
\end_inset

postgresql
\begin_inset space \hspace{}
\length 0bp
\end_inset

://
\begin_inset space \hspace{}
\length 0bp
\end_inset

localhost/
\begin_inset space \hspace{}
\length 0bp
\end_inset

endpoints?
\begin_inset space \hspace{}
\length 0bp
\end_inset

user=postgres&
\begin_inset space \hspace{}
\length 0bp
\end_inset

password=postgres
\family default
.
 See Vagrantfile for currently supported version, although other versions
 will probably work fine.
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_SINGLE_APPLICATION_MODE_TIMEZONE_ID
\family default
 A string timezone ID such as 
\family typewriter
Europe/Berlin
\family default
.
 See the column 
\begin_inset Quotes eld
\end_inset

TZ database name
\begin_inset Quotes erd
\end_inset

 in the table at Wikipedia
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
\end_layout

\end_inset


\end_layout

\end_inset

 for a full list.
 The string 
\begin_inset Quotes eld
\end_inset

UTC
\begin_inset Quotes erd
\end_inset

 may also be used.
 
\end_layout

\begin_deeper
\begin_layout Standard
This is used by the 
\begin_inset Quotes eld
\end_inset

On-Demand Incrementing Number
\begin_inset Quotes erd
\end_inset

 feature, which allocates unique values within, for example, a month.
 Exactly at what point in time the month begins/ends is influenced by this
 timezone.
 The environment variable is mandatory if the 
\begin_inset Quotes eld
\end_inset

On-Demand Incrementing Number
\begin_inset Quotes erd
\end_inset

 feature is used within the application.
\end_layout

\begin_layout Standard
This variable is only needed if the application is in single-application
 mode.
 If the application is in multi-application mode then this information is
 taken from the 
\family typewriter
application_config
\family default
 database table which is used to store which applications are available
 in multi-application mode.
\end_layout

\end_deeper
\begin_layout Subsubsection
Multiple Application Mode
\end_layout

\begin_layout Standard
The following environment variables apply only to Multiple Application Mode:
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_BASE_URL 
\family default
See above
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_JDBC_URL
\family default
 See above
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_PUBLISHED_APPLICATION_DIRECTORY
\family default
 Optional.
 A directory where published applications are stored.
 This is only really useful if Endpoints is run outside Docker, where the
 checked-out applications might survive an application restart.
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_SERVICE_PORTAL_ENVIRONMENT_DISPLAY_NAME
\family default
 Optional.
 For example "Production Environment", for the login screen of the Service
 Portal.
\end_layout

\begin_layout Subsubsection
Both Modes
\end_layout

\begin_layout Standard
The following environment variables apply to both modes:
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_CHECK_HASH
\family default
 Optional.
 Default true.
 Can be "false".
 If this is set to "false", no hash checking is done.
 This is useful when Endpoints is not world-visible, for example part of
 a multi-image Kubernetes Hub, etc.
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_DISPLAY_EXPECTED_HASH
\family default
 Optional.
 Default false.
 For debugging, set this to "true" in order to display the expected value
 of security hashes.
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_XSLT_DEBUG_LOG
\family default
 Optional.
 Default false.
 For debugging, display the input and output to the parameter transformation
 XSLT in the logfile, and also bodies produced by XSLT which will be sent
 to HTTP servers.
\end_layout

\begin_layout Description

\family typewriter
ENDPOINTS_REQUEST_LOG_EXPIRY_DAYS
\family default
 Optional.
 If this is set, then delete old 
\begin_inset Quotes eld
\end_inset

request log
\begin_inset Quotes erd
\end_inset

 entries after this number of days.
 If not set, 
\begin_inset Quotes eld
\end_inset

request log
\begin_inset Quotes erd
\end_inset

 entries are not deleted.
\end_layout

\begin_layout Description

\family typewriter
JAVA_OPTIONS
\family default
 Optional.
 Passed to the JVM.
 Controls hings such as Java heap size.
 By default, Java takes care of assigning the right amount of memory for
 the Docker container.
 Useful values (multiple values separated by a space)
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
-verbose:gc
\family default
 This causes logs to be printed each time a GC occurs, which show the amount
 of memory used and reclaimed.
 Useful for determining if the instance needs to be given more memory, or
 can be given less memory in order to save money.
\end_layout

\begin_layout Description

\family typewriter
-Dwicket.configuration=development
\family default
 This causes exceptions to be output to the browser, which can be useful
 for debugging in a situation where there is no access to the Docker logfile.
 This is not recommended for Prod deployment as this can expose internal
 information which might be useful to attackers.
\end_layout

\begin_layout Description

\family typewriter
-XX:ActiveProcessorCount=2
\family default
 To force the number of threads to use in parallel operations.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.databasesandlife.com/java-docker-aws-ecs-multicore/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Description

\family typewriter
ENDPOINTS_AWS_S3_ENDPOINT_OVERRIDE
\family default
 Optional.
 If present it uses a different URL for AWS S3 access.
 This is useful in test enviroments with a simulated local S3.
 It is not intended to be used when deploying the application for real.
\end_layout

\begin_layout Subsection
Memory
\end_layout

\begin_layout Standard
According to AWS, 162MB is used after Endpoints starts with a sample application.
 It would seem reasonable to allocate at least 250MB to the application.
\end_layout

\begin_layout Standard
Test your workload with 
\family typewriter
-verbose:gc
\family default
 enabled to see if your workload requires more memory to avoid frequent
 GCs.
\end_layout

\begin_layout Section
Software Architecture
\end_layout

\begin_layout Standard
To serve an endpoints request, the 
\family typewriter
EndpointsServlet
\family default
 is called.
 As an endpoints request takes parameters and produces arbitrary bytes,
 it is not a traditional 
\begin_inset Quotes eld
\end_inset

web application
\begin_inset Quotes erd
\end_inset

 nor a traditional 
\begin_inset Quotes eld
\end_inset

REST API service
\begin_inset Quotes erd
\end_inset

.
 Therefore no web framework is used.
\end_layout

\begin_layout Subsection
Service Portal is Not a Separate Application
\end_layout

\begin_layout Standard
The Service Portal software is mounted at the URL
\family typewriter
/service-portal
\family default
.
 This is done via an entry in 
\family typewriter
web.xml
\family default
.
 
\end_layout

\begin_layout Standard
Features such as the publishing process require much of the main software
 (to check that the newly-published application is without errors).
 It is thus simpler to create one piece of software, than a 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 Maven Module and two web applications.
 Therefore:
\end_layout

\begin_layout Itemize
The Service Portal shares the Git repository with the rest of the software
\end_layout

\begin_layout Itemize
The Service Portal is deployed together with the main software in a single
 Docker image
\end_layout

\begin_layout Itemize
Service Portal database migration scripts are stored in the same directory
 as database migration scripts for the rest of the software.
\end_layout

\begin_layout Subsection
Stack
\end_layout

\begin_layout Itemize
Maven is used for compilation, this is the current industry standard for
 compiling Java software.
\end_layout

\begin_layout Itemize
Editor is either Eclipse (free) or IntelliJ (not free), at the developers
 discretion.
 Creation of a project is done from the Maven files: IDE files are not checked
 in, to avoid redundancy, and to avoid the possibility one developer changes
 something in IntelliJ and does not check that the Eclipse project still
 works.
\end_layout

\begin_layout Itemize
FindBugs static analysis tool is used to reduce bugs.
\end_layout

\begin_layout Itemize
Java 10's 
\family typewriter
var
\family default
 is used everywhere.
\end_layout

\begin_layout Itemize
Lombok's 
\family typewriter
@SneakyThrows
\family default
 is preferred to re-throwing checked exceptions as 
\family typewriter
RuntimeException.
\end_layout

\begin_layout Itemize
Nullability is annotated with 
\family typewriter
@Nonnull
\family default
 and 
\family typewriter
@CheckForNull
\family default
 to reduce 
\family typewriter
NullPointerException
\family default
 errors.
\end_layout

\begin_layout Itemize
Vagrant is used to simulate the deployment environment on the developer's
 workstation.
\end_layout

\begin_layout Itemize
To test, run 
\family typewriter
jetty:run
\family default
 in Maven.
 
\end_layout

\begin_deeper
\begin_layout Itemize
This is preferred over using a Jetty installed via Debian and symlinking
 the WAR file, as it's easier to stop and free the port, which is necessary
 for when testing with Docker.
\end_layout

\begin_layout Itemize
Also, there is no danger of forgetting to restart Jetty, and it's easier
 to see the logfile as it's on stdout.
\end_layout

\begin_layout Itemize
Note that 
\family typewriter
jetty:run
\family default
 is very slow, it takes 1-2 seconds on my workstation to process every click,
 even if the click doesn't do anything.
 However, this is due to the Maven plugin's reloading.
 On the live server (or by using a Standard Jetty within the Vagrant VM)
 the application is fast.
\end_layout

\end_deeper
\begin_layout Itemize
Git information and the Java source is added to the generated WAR file,
 to help with debugging live system problems, in case only the WAR is available.
\end_layout

\begin_layout Itemize
Flyway is used for automated database migrations.
\end_layout

\begin_layout Itemize
Database is PostgreSQL.
 (See Vagrantfile for current version.)
\end_layout

\begin_layout Itemize
Terraform is used to provision the software on AWS.
 The Terraform file and Terraform state is checked in to Git.
\end_layout

\begin_layout Itemize
We use SLF4J's logging API to log, and Logback as the implementation (which
 supports SLF4J's log API out-of-the-box).
\end_layout

\begin_layout Subsection
Service Portal
\end_layout

\begin_layout Itemize
The software is written in Java, and not Javascript, due to better type-checking
 and thus maintainability.
\end_layout

\begin_layout Itemize
The software is written in Apache Wicket, which is a standard client-server
 (non-SPA) Java web framework.
 See 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://wicket.apache.org/
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
CSS and other static resources are checked in together with the HTML code
 and referenced via 
\family typewriter
<wicket:link>
\family default
.
 (Alternative options would be to store the files in the 
\begin_inset Quotes eld
\end_inset

web
\begin_inset Quotes erd
\end_inset

 directory and have them served by Jetty, or store them somewhere else and
 have them served by a proxy such as Apache or nginx.) This is chosen so
 that the HTML files can still be clicked on without Wicket or Vagrant.
 This has the disadvantage that all Wicket page classes must be in the same
 package (no sub-packages) but there are currently not many pages, so this
 is an acceptable disadvantage.
\end_layout

\begin_layout Itemize
Wicket IDs are camel case with initial lowercase like 
\family typewriter
fooBar
\family default
 because that's the way attributes are in Java, therefore those Wicket elements
 which are mapped to Java attributes are consistent with the rest of the
 Wicket IDs.
\end_layout

\begin_layout Itemize
The software is not translated, it is only available in English.
\end_layout

\begin_layout Itemize
There is no class that handles authentication, as in the Wicket tutorials.
 Instead, each page class has in its constructor the necessary code to find
 out if the user is allowed to view this page, and to redirect somewhere
 appropriate if not.
 This is less 
\begin_inset Quotes eld
\end_inset

action at a distance
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
For redirects, the various Wicket exceptions are thrown, as opposed to using
 the method 
\family typewriter
setResponsePage(..)
\family default
.
 The problem with that method is that it's easy to forget the 
\family typewriter
return
\family default
 statement that is necessary directly afterwards.
\end_layout

\begin_layout Itemize
The various admin pages, and the various application pages, are all targets
 for 
\begin_inset Quotes eld
\end_inset

continue to original page
\begin_inset Quotes erd
\end_inset

.
 That is to say, if you try to access one, and then you are logged out,
 you have the opportunity to log in and then choose an application if necessary
 and then continue to that page.
\end_layout

\begin_layout Subsection
Daily Jobs
\end_layout

\begin_layout Standard
There are certain jobs that need to be run regularly, specifically deletion
 of old items.
 For convenience, these jobs are run once a day (although they could, in
 principle, be run with any other frequency.)
\end_layout

\begin_layout Standard
So that the installation of this process does not need to complicate the
 installation instructions, these jobs are done from the main web server
 process.
\end_layout

\begin_layout Standard
This means that, in a load-balanced set up, there might be multiple processes
 executing these jobs.
 To prevent the situation that all servers are restarted at the same time,
 and thus all daily jobs are done at the same time, upon startup a daily
 job decides on a random time within the day e.g.
 12:48, and always executes its jobs at that time.
\end_layout

\begin_layout Standard
See the 
\family typewriter
DailyJob
\family default
 superclass for more information.
\end_layout

\begin_layout Section
Saxon-HE and Saxon-PE
\end_layout

\begin_layout Standard
There are two version of the Saxon XSLT processor.
 There is the open source and free Saxon-HE (Home Edition) and the commercial
 per-server-cost edition Saxon-PE (Professional Edition).
 For our purposes, the difference is, that Saxon-PE can allow XSLT code
 to access Java functions such as 
\begin_inset Quotes eld
\end_inset

create new UUID
\begin_inset Quotes erd
\end_inset

.
 Each installation must have its own Saxon-PE file.
 By default, Saxon-HE is used.
 To use Saxon-PE:
\end_layout

\begin_layout Enumerate
Get access to the Saxon-PE JAR.
 You can do this by purchasing it from 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.saxonica.com/shop/shop.html#!/Individual-Licenses/c/905991
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
mvn install:install-file -Dfile=saxon-9.7.0.18-pe.jar -DgroupId=net.sf.saxon -Dartifac
tId=Saxon-PE -Dversion=9.7.0.18 -Dpackaging=jar
\end_layout

\begin_layout Enumerate
Create the file 
\family typewriter
saxon-pe/saxon-license.lic
\family default
 with the license you have acquired during the purchase process.
\end_layout

\begin_layout Enumerate
Compile the source using 
\family typewriter
mvn ...
 -DSaxon=PE
\end_layout

\begin_layout Section
Database
\end_layout

\begin_layout Standard
For brevity, only database tables containing noteworthy or non-obvious propertie
s are listed in this section.
 Tables are listed in alphabetical order.
\end_layout

\begin_layout Subsection
The 
\begin_inset Quotes eld
\end_inset


\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

config
\family default

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

publish
\family default

\begin_inset Quotes erd
\end_inset

 Tables
\end_layout

\begin_layout Standard
For a 
\begin_inset Quotes eld
\end_inset

single application deployment
\begin_inset Quotes erd
\end_inset

, both these tables are ignored.
\end_layout

\begin_layout Standard
The 
\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

config
\family default
 table stores information that an administrator might update, for example
 to note that the application exists, whether it is locked (e.g.
\begin_inset space \space{}
\end_inset

if the customer does not pay, etc.) The 
\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

publish
\family default
 table stores information on which applications have been published and
 in what revisions they are published.
 
\end_layout

\begin_layout Standard
The tables are different to clearly differentiate between the facts that
 a human can alter (the 
\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

config
\family default
 table) and the facts that the publishing process creates (the 
\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

publish
\family default
 table).
\end_layout

\begin_layout Standard
In addition, applications can be published to multiple environments, but
 configured once.
 So for an application published to two environments, there is one row in
 
\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

config
\family default
 but two rows in 
\family typewriter
application_
\begin_inset space \hspace{}
\length 0cm
\end_inset

publish
\family default
 (one row per environment).
\end_layout

\begin_layout Standard
The 
\family typewriter
timezone
\family default
 field specifies the time zone of the application such as 
\begin_inset Quotes eld
\end_inset

Europe/Berlin
\begin_inset Quotes erd
\end_inset

, which is relevant for creating unique auto-increment IDs per month or
 year.
\end_layout

\begin_layout Subsection
The Service Portal Login Tables
\end_layout

\begin_layout Standard
Which users may log into the Service Portal are stored in the 
\family typewriter
service_
\begin_inset space \hspace{}
\length 0cm
\end_inset

portal_
\begin_inset space \hspace{}
\length 0cm
\end_inset

login
\family default
 table.
\end_layout

\begin_layout Standard
After the user has logged in, they have access to a certain number of applicatio
ns.
 Which applications a Service Portal user has access to is stored in the
 
\family typewriter
service_
\begin_inset space \hspace{}
\length 0cm
\end_inset

portal_
\begin_inset space \hspace{}
\length 0cm
\end_inset

login_
\begin_inset space \hspace{}
\length 0cm
\end_inset

application
\family default
 table.
\end_layout

\begin_layout Standard
The intention is that both these tables are updated manually.
 The Service Portal reads from these tables but, currently, no software
 writes to these tables.
\end_layout

\begin_layout Standard
Note that only bcrypt passwords starting 
\family typewriter
$2a$
\family default
 are accepted (for example, ones 
\family typewriter
$2y$
\family default
 do not work).
 Hashes generated at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.browserling.com/tools/bcrypt
\end_layout

\end_inset

 are known to work.
\end_layout

\begin_layout Subsection
Request Log Tables
\end_layout

\begin_layout Standard
Each request is logged.
 An entry is created in the following two tables:
\end_layout

\begin_layout Description

\family typewriter
request_log_ids
\family default
 Stores information such as 
\begin_inset Quotes eld
\end_inset

random IDs
\begin_inset Quotes erd
\end_inset

, which must be unique, and thus should not be deleted.
\end_layout

\begin_layout Description

\family typewriter
request_log
\family default
 Stores information such as when the request occurred and potentially the
 input and output of the request (in debug mode), which is data that should
 be deleted after a set period of time.
\end_layout

\begin_deeper
\begin_layout Standard
The columns 
\family typewriter
request_content_type
\family default
 and 
\family typewriter
request_body
\family default
 are set if the request was a POST/PUT etc.
\begin_inset space \space{}
\end_inset

(i.e.
\begin_inset space \space{}
\end_inset

with a request body), and if the request goes through the 
\begin_inset Quotes eld
\end_inset

debug
\begin_inset Quotes erd
\end_inset

 flow (i.e.
\begin_inset space \space{}
\end_inset

 application has debug allowed, and the request has its debug param set).
 If the request is a GET request, there is no request body, nor content
 type for that request body etc.
 These columns are either both set or neither are set.
\end_layout

\end_deeper
\begin_layout Standard
The reason for the two tables is that there is the requirement to delete
 old request log entries.
 However certain items, such as which random numbers have already been used,
 must not be deleted.
 So the former table stores data which cannot be deleted and the latter
 table stores items which should be deleted.
\end_layout

\begin_layout Subsection
The 
\begin_inset Quotes eld
\end_inset


\family typewriter
flyway_
\begin_inset space \hspace{}
\length 0cm
\end_inset

schema_
\begin_inset space \hspace{}
\length 0cm
\end_inset

history
\family default

\begin_inset Quotes erd
\end_inset

 Table
\end_layout

\begin_layout Standard
Table used by the automated migration system Flyway.
\end_layout

\end_body
\end_document
